代码示意：
一、逐位相加，处理进位 -->用数组来存放每位相加结果的字符
时间复杂度O（n） 空间复杂度O（n）
var addStrings = function(num1, num2) {
    if(num1 == 0) return num2;
    if(num2 == 0) return num1;
    let i =num1.length-1,j=num2.length-1,arr=[],sum=0,carry=0,a,b;
    while(i>=0 || j>=0){
        a = i>=0?parseInt(num1[i]) : 0;
        b = j>=0?parseInt(num2[j]) : 0;
        sum = a+b+carry;
        if(sum>=10){
            yushu = sum%10;
            carry = 1;
            arr.unshift(yushu);
        }else {
            carry=0; //注意这里 不能省略 要更新carry进位
            arr.unshift(sum);
        }
        i--;j--;
    }
    if(carry) arr.unshift(carry); //处理最后一位进位
    return arr.join("");
};
二、用字符串来拼接每位相加得到的结果字符
时间复杂度O（n），空间复杂度O（1）
var addStrings = function(num1, num2) {
    if(num1 == 0) return num2;
    if(num2 == 0) return num1;
    let i =num1.length-1,j=num2.length-1,str='',sum=0,carry=0,a,b;
    while(i>=0 || j>=0){
        //除了parseInt（）可以转化成整数 还可以直接在字符前加 + 来强制转化
        a = i>=0?+num1[i] : 0;
        b = j>=0?+num2[j] : 0;
        sum = a+b+carry;
        carry = sum>=10? 1 :0;
        str = sum%10 + str;
        i--;j--;
    }
    return carry==1?1+str : str;
};
