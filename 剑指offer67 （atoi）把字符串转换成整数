
代码示意：
一、手动匹配 
var strToInt = function(str) {
    if(str.replace(/\s+/g,"") === '') return 0; //首先排除掉 只有空格的字符串
    let i=0,ansStr='';
    while(i<str.length){
        while(str[i]===' ') i++; //排除掉第一个非空字符前的空格
        if(str[i]==='+' || str[i]==='-' || (str[i]>='0'&&str[i]<='9')){ //第一个合理字符的三种情况
            ansStr = ansStr + str[i++];
            while(i<str.length && str[i]>='0'&& str[i]<='9'){ //从第二个合理字符开始匹配尽可能多的数字
                ansStr += str[i++];
            }
            if(ansStr==='+' || ansStr==='-') return 0; //如果是只有正负号的字符串
            let ansInt = parseInt(ansStr);
            let INT_MIN=-Math.pow(2,31),INT_MAX=Math.pow(2,31)-1;
            if(ansInt<INT_MIN) return INT_MIN;
            if(ansInt>INT_MAX) return INT_MAX;
            return ansInt;
        }else {
            return 0;
        }
    }

};
二、实用parseInt
题目的主要规则可以概况为：

忽略开头空格
忽略整数部分后的字符
返回有符号整数
范围在 32 位内
函数不能进行有效的转换时，请返回 0

所有的条件 parseInt 都满足，除了

范围在 32 位内（含）
函数不能进行有效的转换：parseInt 返回的是 NaN

代码实现：

const myAtoi = function(s) {
    // parseInt
    const number = parseInt(s);
    
    // 判断 parseInt 的结果是否为 NaN，是则返回 0
    if(isNaN(number)) {
        return 0;
    } else if (number < Math.pow(-2, 31) || number > Math.pow(2, 31) - 1) {
        // 超出
        return number < Math.pow(-2, 31) ? Math.pow(-2, 31) : Math.pow(2, 31) - 1;
    } else {
        return number;
    }
}


